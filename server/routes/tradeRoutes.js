const express = require("express");
const Trade = require("../models/tradeModel");
const router = express.Router();
const axios = require("axios");
// üìä API 1: L·∫•y d·ªØ li·ªáu ph√¢n b·ªï kh·ªëi l∆∞·ª£ng theo v√πng gi√° (cho Stacked Bar Chart)
router.get("/stacked/:date", async (req, res) => {
  try {
    const { date } = req.params;
    const startTime = new Date(`${date}T00:00:00.000Z`);  // 0h ng√†y ƒë∆∞·ª£c ch·ªçn
    const endTime = new Date(`${date}T23:59:59.999Z`);   // 23h59 ng√†y ƒë∆∞·ª£c ch·ªçn

    console.log(`üì© Ki·ªÉm tra d·ªØ li·ªáu t·ª´ ${startTime} ƒë·∫øn ${endTime}`);

    // üîπ Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ c√≥ trong MongoDB
    const existingTrades = await Trade.find({
      timestamp: { $gte: startTime, $lte: endTime }
    });

    // üîπ Nh√≥m d·ªØ li·ªáu theo gi·ªù ƒë√£ c√≥ trong MongoDB
    let existingHours = new Set();
    existingTrades.forEach(trade => {
      existingHours.add(new Date(trade.timestamp).getUTCHours());
    });

    console.log(`‚úÖ D·ªØ li·ªáu ƒë√£ c√≥ trong DB cho c√°c gi·ªù: ${[...existingHours].sort().join(", ")}`);

    let missingHours = [];
    for (let hour = 0; hour < 24; hour++) {
      if (!existingHours.has(hour)) {
        missingHours.push(hour);
      }
    }

    console.log(`‚ö†Ô∏è Gi·ªù ch∆∞a c√≥ d·ªØ li·ªáu: ${missingHours.length > 0 ? missingHours.join(", ") : "Kh√¥ng c√≥ gi·ªù n√†o thi·∫øu"}`);

    let allTrades = [];

    // üîπ N·∫øu thi·∫øu d·ªØ li·ªáu gi·ªù n√†o, g·ªçi Binance API ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªù ƒë√≥
    if (missingHours.length > 0) {
      for (let hour of missingHours) {
        const hourStart = new Date(`${date}T${hour.toString().padStart(2, "0")}:00:00.000Z`).getTime();
        const hourEnd = new Date(`${date}T${hour.toString().padStart(2, "0")}:59:59.999Z`).getTime();

        console.log(`‚è≥ G·ªçi Binance API t·ª´ ${new Date(hourStart)} ƒë·∫øn ${new Date(hourEnd)}`);

        try {
          const response = await axios.get(
            `https://api.binance.com/api/v3/aggTrades?symbol=BTCUSDT&startTime=${hourStart}&endTime=${hourEnd}&limit=1000`
          );
          const trades = response.data;

          if (trades.length > 0) {
            allTrades = [...allTrades, ...trades];
          }
        } catch (err) {
          console.error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu Binance (gi·ªù ${hour}):`, err.message);
        }
      }

      console.log(`üìä T·ªïng s·ªë giao d·ªãch l·∫•y ƒë∆∞·ª£c t·ª´ Binance: ${allTrades.length}`);

      // üîπ Chuy·ªÉn d·ªØ li·ªáu t·ª´ Binance th√†nh format MongoDB
      const formattedTrades = allTrades.map(trade => ({
        symbol: "BTCUSDT",
        price: parseFloat(trade.p),
        volume: parseFloat(trade.q),
        type: trade.m ? "sell" : "buy",
        timestamp: new Date(trade.T)
      }));

      // üîπ L∆∞u v√†o MongoDB n·∫øu c√≥ d·ªØ li·ªáu m·ªõi
      if (formattedTrades.length > 0) {
        await Trade.insertMany(formattedTrades);
        console.log("‚úÖ D·ªØ li·ªáu m·ªõi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o MongoDB.");
      }

      // üîπ K·∫øt h·ª£p d·ªØ li·ªáu m·ªõi v·ªõi d·ªØ li·ªáu c≈©
      existingTrades.push(...formattedTrades);
    }

    // üîπ Tr·∫£ d·ªØ li·ªáu ƒë√£ format cho frontend
    res.json(await formatTradeDataStacked(existingTrades));
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:", err);
    res.status(500).json({ error: "Server Error" });
  }
});

// ‚úÖ H√†m format d·ªØ li·ªáu theo t·ª´ng gi·ªù (group by hour)
const formatTradeDataStacked = async (trades) => {
  const fullHours = Array.from({ length: 24 }, (_, i) => ({
    time: `${i}:00`,
    buyVolume: 0,
    sellVolume: 0
  }));

  trades.forEach(trade => {
    const hour = new Date(trade.timestamp).getUTCHours(); // L·∫•y gi·ªù UTC
    if (trade.type === "buy") {
      fullHours[hour].buyVolume += trade.volume;
    } else {
      fullHours[hour].sellVolume += trade.volume;
    }
  });

  return fullHours;
};


const PAGE_SIZE = 5000; // Gi·ªõi h·∫°n m·ªói l·∫ßn l·∫•y t·ª´ MongoDB

// üìå H√†m chia v√πng gi√° theo Fibonacci
const getFibonacciPriceRanges = async (minPrice, maxPrice) => {
  const fibLevels = [0, 0.236, 0.382, 0.5, 0.618, 0.786, 1];
  let priceRanges = [];

  for (let i = 0; i < fibLevels.length - 1; i++) {
    const min = minPrice + (maxPrice - minPrice) * fibLevels[i];
    const max = minPrice + (maxPrice - minPrice) * fibLevels[i + 1];

    priceRanges.push({
      min: Math.round(min),
      max: Math.round(max),
      label: `${Math.round(min)} - ${Math.round(max)} USDT`,
      buyVolume: 0,
      sellVolume: 0
    });
  }

  return priceRanges;
};

// üìå API l·∫•y d·ªØ li·ªáu giao d·ªãch theo v√πng gi√°
router.get("/trade-volume/:timeframe/:date?", async (req, res) => {
  try {
    const { timeframe, date } = req.params;
    const { start, end } = req.query; // Nh·∫≠n start & end t·ª´ query params
    let startTime, endTime;

    if (timeframe === "day") {
      startTime = new Date(`${date}T00:00:00.000Z`);
      endTime = new Date(`${date}T23:59:59.999Z`);
    } else if (timeframe === "month") {
      startTime = new Date(`${date}-01T00:00:00.000Z`);
      endTime = new Date(`${date}-31T23:59:59.999Z`);
    } else if (timeframe === "year") {
      startTime = new Date(`${date}-01-01T00:00:00.000Z`);
      endTime = new Date(`${date}-12-31T23:59:59.999Z`);
    } else if (timeframe === "range") {
      if (!start || !end) {
        return res.status(400).json({ error: "Thi·∫øu tham s·ªë start ho·∫∑c end!" });
      }
      startTime = new Date(`${start}T00:00:00.000Z`);
      endTime = new Date(`${end}T23:59:59.999Z`);
    } else if (timeframe === "all") {
      console.log("üì© L·∫•y to√†n b·ªô l·ªãch s·ª≠ giao d·ªãch t·ª´ MongoDB...");
      const allTrades = await Trade.find().sort({ timestamp: 1 }).limit(5000);

      if (allTrades.length === 0) {
        return res.json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch trong h·ªá th·ªëng." });
      }

      return res.json(await formatTradeData(allTrades));
    } else {
      return res.status(400).json({ error: "Invalid timeframe. D√πng 'day', 'month', 'year', 'range' ho·∫∑c 'all'." });
    }

    console.log(`üì© L·∫•y d·ªØ li·ªáu t·ª´ ${startTime} ƒë·∫øn ${endTime}`);

    // üîπ Ki·ªÉm tra MongoDB tr∆∞·ªõc khi g·ªçi Binance API
    const existingTrades = await Trade.find({
      timestamp: { $gte: startTime, $lte: endTime }
    }).limit(5000);

    let tradeData = existingTrades;

    if (tradeData.length === 0) {
      console.log("‚ö° D·ªØ li·ªáu ch∆∞a c√≥, g·ªçi API Binance...");

      let allTrades = [];
      for (let d = new Date(startTime); d <= endTime; d.setDate(d.getDate() + 1)) {
        const dayStart = new Date(d).setUTCHours(0, 0, 0, 0);
        const dayEnd = new Date(d).setUTCHours(23, 59, 59, 999);

        console.log(`üì© Fetching Binance API: ${new Date(dayStart)} - ${new Date(dayEnd)}`);

        try {
          const response = await axios.get(
            `https://api.binance.com/api/v3/aggTrades?symbol=BTCUSDT&startTime=${dayStart}&endTime=${dayEnd}&limit=1000`
          );
          const trades = response.data;

          if (trades.length > 0) {
            const formattedTrades = trades.map(trade => ({
              symbol: "BTCUSDT",
              price: parseFloat(trade.p),
              volume: parseFloat(trade.q),
              type: trade.m ? "sell" : "buy",
              timestamp: new Date(trade.T)
            }));

            await Trade.insertMany(formattedTrades);
            console.log(`‚úÖ ƒê√£ l∆∞u ${formattedTrades.length} giao d·ªãch v√†o MongoDB.`);
          }
        } catch (err) {
          console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu Binance:", err.message);
        }
      }
    }

    const minPrice = Math.min(...tradeData.map(trade => trade.price));
    const maxPrice = Math.max(...tradeData.map(trade => trade.price));

    const priceRanges = await getFibonacciPriceRanges(minPrice, maxPrice);

    tradeData.forEach((trade) => {
      priceRanges.forEach((range) => {
        if (trade.price >= range.min && trade.price < range.max) {
          if (trade.type === "buy") {
            range.buyVolume += trade.volume;
          } else {
            range.sellVolume += trade.volume;
          }
        }
      });
    });

    console.log("üìä D·ªØ li·ªáu g·ª≠i ƒë·∫øn FE:", priceRanges);
    res.json(priceRanges);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu trade-volume:", err);
    res.status(500).json({ error: "Server Error" });
  }
});




// üìä API 3: Heatmap - L·∫•y kh·ªëi l∆∞·ª£ng mua theo v√πng gi√° v√† th·ªùi gian
router.get("/heatmap", async (req, res) => {
  try {
    const data = await Trade.aggregate([
      {
        $group: {
          _id: { price: "$price", time: { $hour: "$timestamp" } },
          volume: { $sum: "$volume" }
        }
      },
      { $sort: { "_id.time": 1, "_id.price": 1 } }
    ]);

    // Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i v·ªÅ frontend
    console.log("üì© API Heatmap Data:", data);

    // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu v·ªÅ ƒë√∫ng format
    res.json(data.map(item => ({
      x: item._id.time,
      y: item._id.price,
      size: 10, // ƒê·ªãnh k√≠ch th∆∞·ªõc dot c·ªë ƒë·ªãnh
      color: item.volume
    })));
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu heatmap:", err);
    res.status(500).json({ error: "Server Error" });
  }
});


module.exports = router;
