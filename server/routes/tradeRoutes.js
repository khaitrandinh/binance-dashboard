const express = require("express");
const Trade = require("../models/tradeModel");
const router = express.Router();
const axios = require("axios");


// üìä API 1: L·∫•y d·ªØ li·ªáu ph√¢n b·ªï kh·ªëi l∆∞·ª£ng theo v√πng gi√° (cho Stacked Bar Chart)
router.get("/stacked/:date", async (req, res) => {
  try {
    const { date } = req.params;
    const startTime = new Date(`${date}T00:00:00.000Z`);  // 0h ng√†y ƒë∆∞·ª£c ch·ªçn
    const endTime = new Date(`${date}T23:59:59.999Z`);   // 23h59 ng√†y ƒë∆∞·ª£c ch·ªçn

    console.log(`üì© Ki·ªÉm tra d·ªØ li·ªáu t·ª´ ${startTime} ƒë·∫øn ${endTime}`);

    // üîπ Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ c√≥ trong MongoDB
    const existingTrades = await Trade.find({
      timestamp: { $gte: startTime, $lte: endTime }
    });

    // üîπ Nh√≥m d·ªØ li·ªáu theo gi·ªù ƒë√£ c√≥ trong MongoDB
    let existingHours = new Set();
    existingTrades.forEach(trade => {
      existingHours.add(new Date(trade.timestamp).getUTCHours());
    });

    console.log(`‚úÖ D·ªØ li·ªáu ƒë√£ c√≥ trong DB cho c√°c gi·ªù: ${[...existingHours].sort().join(", ")}`);

    let missingHours = [];
    for (let hour = 0; hour < 24; hour++) {
      if (!existingHours.has(hour)) {
        missingHours.push(hour);
      }
    }

    console.log(`‚ö†Ô∏è Gi·ªù ch∆∞a c√≥ d·ªØ li·ªáu: ${missingHours.length > 0 ? missingHours.join(", ") : "Kh√¥ng c√≥ gi·ªù n√†o thi·∫øu"}`);

    let allTrades = [];

    // üîπ N·∫øu thi·∫øu d·ªØ li·ªáu gi·ªù n√†o, g·ªçi Binance API ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªù ƒë√≥
    if (missingHours.length > 0) {
      for (let hour of missingHours) {
        const hourStart = new Date(`${date}T${hour.toString().padStart(2, "0")}:00:00.000Z`).getTime();
        const hourEnd = new Date(`${date}T${hour.toString().padStart(2, "0")}:59:59.999Z`).getTime();

        console.log(`‚è≥ G·ªçi Binance API t·ª´ ${new Date(hourStart)} ƒë·∫øn ${new Date(hourEnd)}`);

        try {
          const response = await axios.get(
            `https://api.binance.com/api/v3/aggTrades?symbol=BTCUSDT&startTime=${hourStart}&endTime=${hourEnd}&limit=1000`
          );
          const trades = response.data;

          if (trades.length > 0) {
            allTrades = [...allTrades, ...trades];
          }
        } catch (err) {
          console.error(`‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu Binance (gi·ªù ${hour}):`, err.message);
        }
      }

      console.log(`üìä T·ªïng s·ªë giao d·ªãch l·∫•y ƒë∆∞·ª£c t·ª´ Binance: ${allTrades.length}`);

      // üîπ Chuy·ªÉn d·ªØ li·ªáu t·ª´ Binance th√†nh format MongoDB
      const formattedTrades = allTrades.map(trade => ({
        symbol: "BTCUSDT",
        price: parseFloat(trade.p),
        volume: parseFloat(trade.q),
        type: trade.m ? "sell" : "buy",
        timestamp: new Date(trade.T)
      }));

      // üîπ L∆∞u v√†o MongoDB n·∫øu c√≥ d·ªØ li·ªáu m·ªõi
      if (formattedTrades.length > 0) {
        await Trade.insertMany(formattedTrades);
        console.log("‚úÖ D·ªØ li·ªáu m·ªõi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o MongoDB.");
      }

      // üîπ K·∫øt h·ª£p d·ªØ li·ªáu m·ªõi v·ªõi d·ªØ li·ªáu c≈©
      existingTrades.push(...formattedTrades);
    }

    // üîπ Tr·∫£ d·ªØ li·ªáu ƒë√£ format cho frontend
    res.json(await formatTradeDataStacked(existingTrades));
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:", err);
    res.status(500).json({ error: "Server Error" });
  }
});

// ‚úÖ H√†m format d·ªØ li·ªáu theo t·ª´ng gi·ªù (group by hour)
const formatTradeDataStacked = async (trades) => {
  const fullHours = Array.from({ length: 24 }, (_, i) => ({
    time: `${i}:00`,
    buyVolume: 0,
    sellVolume: 0
  }));

  trades.forEach(trade => {
    const hour = new Date(trade.timestamp).getUTCHours(); // L·∫•y gi·ªù UTC
    if (trade.type === "buy") {
      fullHours[hour].buyVolume += trade.volume;
    } else {
      fullHours[hour].sellVolume += trade.volume;
    }
  });

  return fullHours;
};


const PAGE_SIZE = 5000; // Gi·ªõi h·∫°n m·ªói l·∫ßn l·∫•y t·ª´ MongoDB

// üìå H√†m chia v√πng gi√° theo Fibonacci
const getFibonacciPriceRanges = async (minPrice, maxPrice) => {
  const fibLevels = [0, 0.236, 0.382, 0.5, 0.618, 0.786, 1];
  let priceRanges = [];

  for (let i = 0; i < fibLevels.length - 1; i++) {
    const min = minPrice + (maxPrice - minPrice) * fibLevels[i];
    const max = minPrice + (maxPrice - minPrice) * fibLevels[i + 1];

    priceRanges.push({
      min: Math.round(min),
      max: Math.round(max),
      label: `${Math.round(min)} - ${Math.round(max)} USDT`,
      buyVolume: 0,
      sellVolume: 0
    });
  }

  return priceRanges;
};

// üìå API l·∫•y d·ªØ li·ªáu giao d·ªãch theo v√πng gi√°
router.get("/trade-volume/:timeframe/:date?", async (req, res) => {
  try {
    const { timeframe, date } = req.params;
    const { start, end } = req.query; // Nh·∫≠n start & end t·ª´ query params
    let startTime, endTime;

    if (timeframe === "day") {
      startTime = new Date(`${date}T00:00:00.000Z`);
      endTime = new Date(`${date}T23:59:59.999Z`);
    } else if (timeframe === "month") {
      startTime = new Date(`${date}-01T00:00:00.000Z`);
      endTime = new Date(`${date}-31T23:59:59.999Z`);
    } else if (timeframe === "year") {
      startTime = new Date(`${date}-01-01T00:00:00.000Z`);
      endTime = new Date(`${date}-12-31T23:59:59.999Z`);
    } else if (timeframe === "range") {
      if (!start || !end) {
        return res.status(400).json({ error: "Thi·∫øu tham s·ªë start ho·∫∑c end!" });
      }
      startTime = new Date(`${start}T00:00:00.000Z`);
      endTime = new Date(`${end}T23:59:59.999Z`);
    } else if (timeframe === "all") {
      console.log("üì© L·∫•y to√†n b·ªô l·ªãch s·ª≠ giao d·ªãch t·ª´ MongoDB...");
      const allTrades = await Trade.find().sort({ timestamp: 1 }).limit(5000);

      if (allTrades.length === 0) {
        return res.json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch trong h·ªá th·ªëng." });
      }

      return res.json(await formatTradeData(allTrades));
    } else {
      return res.status(400).json({ error: "Invalid timeframe. D√πng 'day', 'month', 'year', 'range' ho·∫∑c 'all'." });
    }

    console.log(`üì© L·∫•y d·ªØ li·ªáu t·ª´ ${startTime} ƒë·∫øn ${endTime}`);

    // üîπ Ki·ªÉm tra MongoDB tr∆∞·ªõc khi g·ªçi Binance API
    const existingTrades = await Trade.find({
      timestamp: { $gte: startTime, $lte: endTime }
    }).limit(5000);

    let tradeData = existingTrades;

    if (tradeData.length === 0) {
      console.log("‚ö° D·ªØ li·ªáu ch∆∞a c√≥, g·ªçi API Binance...");

      let allTrades = [];
      for (let d = new Date(startTime); d <= endTime; d.setDate(d.getDate() + 1)) {
        const dayStart = new Date(d).setUTCHours(0, 0, 0, 0);
        const dayEnd = new Date(d).setUTCHours(23, 59, 59, 999);

        console.log(`üì© Fetching Binance API: ${new Date(dayStart)} - ${new Date(dayEnd)}`);

        try {
          const response = await axios.get(
            `https://api.binance.com/api/v3/aggTrades?symbol=BTCUSDT&startTime=${dayStart}&endTime=${dayEnd}&limit=1000`
          );
          const trades = response.data;

          if (trades.length > 0) {
            const formattedTrades = trades.map(trade => ({
              symbol: "BTCUSDT",
              price: parseFloat(trade.p),
              volume: parseFloat(trade.q),
              type: trade.m ? "sell" : "buy",
              timestamp: new Date(trade.T)
            }));

            await Trade.insertMany(formattedTrades);
            console.log(`‚úÖ ƒê√£ l∆∞u ${formattedTrades.length} giao d·ªãch v√†o MongoDB.`);
          }
        } catch (err) {
          console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu Binance:", err.message);
        }
      }
    }

    const minPrice = Math.min(...tradeData.map(trade => trade.price));
    const maxPrice = Math.max(...tradeData.map(trade => trade.price));

    const priceRanges = await getFibonacciPriceRanges(minPrice, maxPrice);

    tradeData.forEach((trade) => {
      priceRanges.forEach((range) => {
        if (trade.price >= range.min && trade.price < range.max) {
          if (trade.type === "buy") {
            range.buyVolume += trade.volume;
          } else {
            range.sellVolume += trade.volume;
          }
        }
      });
    });

    console.log("üìä D·ªØ li·ªáu g·ª≠i ƒë·∫øn FE:", priceRanges);
    res.json(priceRanges);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu trade-volume:", err);
    res.status(500).json({ error: "Server Error" });
  }
});


// üìå H√†m chia v√πng gi√° theo Fibonacci
const getFibonacciPriceRangesHeatmap = async (minPrice, maxPrice) => {
  const fibLevels = [0, 0.236, 0.382, 0.5, 0.618, 0.786, 1];
  let priceRanges = [];

  for (let i = 0; i < fibLevels.length - 1; i++) {
    const min = minPrice + (maxPrice - minPrice) * fibLevels[i];
    const max = minPrice + (maxPrice - minPrice) * fibLevels[i + 1];

    priceRanges.push({
      min: Math.round(min),
      max: Math.round(max),
      label: `${Math.round(min)} - ${Math.round(max)} USDT`,
      buyVolume: 0,
      sellVolume: 0
    });
  }

  return priceRanges;
};

// üìå API l·∫•y d·ªØ li·ªáu Heatmap
router.get("/heatmap/:timeframe/:date?", async (req, res) => {
  try {
    const { timeframe, date } = req.params;
    let startTime, endTime, interval, timeGroupKey;

    if (timeframe === "day") {
      startTime = new Date(`${date}T00:00:00.000Z`);
      endTime = new Date(`${date}T23:59:59.999Z`);
      interval = "hour";
      timeGroupKey = (timestamp) => new Date(timestamp).getUTCHours();
    } else if (timeframe === "month") {
      startTime = new Date(`${date}-01T00:00:00.000Z`);
      endTime = new Date(`${date}-31T23:59:59.999Z`);
      interval = "day";
      timeGroupKey = (timestamp) => new Date(timestamp).getUTCDate();
    } else if (timeframe === "year") {
      startTime = new Date(`${date}-01-01T00:00:00.000Z`);
      endTime = new Date(`${date}-12-31T23:59:59.999Z`);
      interval = "month";
      timeGroupKey = (timestamp) => new Date(timestamp).getUTCMonth() + 1;
    } else {
      return res.status(400).json({ error: "Invalid timeframe" });
    }

    console.log(`üì© L·∫•y d·ªØ li·ªáu t·ª´ ${startTime} ƒë·∫øn ${endTime}`);

    // üî∏ √Åp d·ª•ng gi·ªõi h·∫°n k√≠ch th∆∞·ªõc d·ªØ li·ªáu
    const MAX_DATA_POINTS = 100000; // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng giao d·ªãch
    let tradeData = await Trade.find(
      { timestamp: { $gte: startTime, $lte: endTime } }
    ).limit(MAX_DATA_POINTS).lean();

    let expectedTimes = generateExpectedTimes(startTime, interval);
    let availableTimes = new Set(tradeData.map(trade => timeGroupKey(trade.timestamp)));
    let missingTimes = expectedTimes.filter(time => !availableTimes.has(time));

    if (missingTimes.length > 0) {
      console.log(`‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu t·∫°i: ${missingTimes.join(", ")}. Ti·∫øn h√†nh c·∫≠p nh·∫≠t...`);

      // üî∏ Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng th·ªùi ƒëi·ªÉm c·∫ßn c·∫≠p nh·∫≠t ƒë·ªÉ tr√°nh qu√° t·∫£i
      const MAX_UPDATE_TIMES = 5;
      const timesToUpdate = missingTimes.slice(0, MAX_UPDATE_TIMES);
      
      if (missingTimes.length > MAX_UPDATE_TIMES) {
        console.log(`‚ö†Ô∏è Qu√° nhi·ªÅu th·ªùi ƒëi·ªÉm c·∫ßn c·∫≠p nh·∫≠t, ch·ªâ c·∫≠p nh·∫≠t ${MAX_UPDATE_TIMES} th·ªùi ƒëi·ªÉm ƒë·∫ßu ti√™n`);
      }

      for (let missingTime of timesToUpdate) {
        let missingStart, missingEnd;

        if (interval === "hour") {
          missingStart = new Date(`${date}T${missingTime.toString().padStart(2, "0")}:00:00.000Z`).getTime();
          missingEnd = new Date(`${date}T${missingTime.toString().padStart(2, "0")}:59:59.999Z`).getTime();
        } else if (interval === "day") {
          missingStart = new Date(`${date}-${missingTime.toString().padStart(2, "0")}T00:00:00.000Z`).getTime();
          missingEnd = new Date(`${date}-${missingTime.toString().padStart(2, "0")}T23:59:59.999Z`).getTime();
        } else if (interval === "month") {
          missingStart = new Date(`${date}-${missingTime.toString().padStart(2, "0")}-01T00:00:00.000Z`).getTime();
          missingEnd = new Date(`${date}-${missingTime.toString().padStart(2, "0")}-31T23:59:59.999Z`).getTime();
        }

        // üî∏ Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng giao d·ªãch ƒë∆∞·ª£c l·∫•y t·ª´ Binance
        const MAX_BINANCE_TRADES = 1000;
        let newTrades = await fetchBinanceData(missingStart, missingEnd, MAX_BINANCE_TRADES);
        
        if (newTrades.length > 0) {
          // üî∏ X·ª≠ l√Ω d·ªØ li·ªáu theo l√¥ ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ
          const BATCH_SIZE = 1000;
          for (let i = 0; i < newTrades.length; i += BATCH_SIZE) {
            const batch = newTrades.slice(i, i + BATCH_SIZE);
            await Trade.insertMany(batch);
          }
          
          // üî∏ Ch·ªâ th√™m v√†o tradeData s·ªë l∆∞·ª£ng gi·ªõi h·∫°n ƒë·ªÉ tr√°nh tr√†n b·ªô nh·ªõ
          const tradesToAdd = newTrades.slice(0, Math.min(newTrades.length, 1000));
          tradeData.push(...tradesToAdd);
          
          console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${newTrades.length} giao d·ªãch cho th·ªùi ƒëi·ªÉm: ${missingTime}`);
        }
      }
    }

    // üî∏ X·ª≠ l√Ω d·ªØ li·ªáu theo l√¥ n·∫øu qu√° l·ªõn
    if (tradeData.length > MAX_DATA_POINTS) {
      console.log(`‚ö†Ô∏è D·ªØ li·ªáu qu√° l·ªõn (${tradeData.length} giao d·ªãch), l·∫•y m·∫´u xu·ªëng ${MAX_DATA_POINTS} giao d·ªãch`);
      // L·∫•y m·∫´u d·ªØ li·ªáu thay v√¨ x·ª≠ l√Ω t·∫•t c·∫£
      const samplingRate = MAX_DATA_POINTS / tradeData.length;
      tradeData = tradeData.filter(() => Math.random() < samplingRate);
    }

    // üî∏ S·ª≠ d·ª•ng m·∫£ng t·∫°m th·ªùi ƒë·ªÉ t√≠nh min/max thay v√¨ map to√†n b·ªô
    let minPrice = Infinity;
    let maxPrice = -Infinity;
    for (const trade of tradeData) {
      if (trade.price < minPrice) minPrice = trade.price;
      if (trade.price > maxPrice) maxPrice = trade.price;
    }
    
    const priceRanges = await getFibonacciPriceRangesHeatmap(minPrice, maxPrice);

    // üî∏ Kh·ªüi t·∫°o c·∫•u tr√∫c d·ªØ li·ªáu t·ªëi ∆∞u h∆°n
    let heatmapData = {};
    expectedTimes.forEach(time => {
      heatmapData[time] = {};
      priceRanges.forEach(range => {
        heatmapData[time][range.label] = { buy: 0, sell: 0 };
      });
    });

    // üî∏ X·ª≠ l√Ω d·ªØ li·ªáu theo l√¥
    const BATCH_SIZE = 5000;
    for (let i = 0; i < tradeData.length; i += BATCH_SIZE) {
      const batch = tradeData.slice(i, i + BATCH_SIZE);
      
      for (const trade of batch) {
        const timeKey = timeGroupKey(trade.timestamp);
        const priceRange = priceRanges.find(range => trade.price >= range.min && trade.price < range.max);

        if (priceRange && heatmapData[timeKey]) {
          const volume = trade.type === "buy" ? "buy" : "sell";
          heatmapData[timeKey][priceRange.label][volume] += trade.volume;
        }
      }
    }

    const formattedData = {
      timeLabels: expectedTimes.map(time => time.toString()),
      priceRanges: priceRanges.map(range => range.label),
      data: Object.entries(heatmapData).map(([time, prices]) => ({
        time: parseInt(time),
        ...Object.fromEntries(Object.entries(prices).map(([price, volumes]) => [price, volumes]))
      }))
    };

    res.json(formattedData);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu Heatmap:", err);
    res.status(500).json({ error: "Server Error" });
  }
});

// üîπ **H√†m t·∫°o danh s√°ch th·ªùi gian k·ª≥ v·ªçng**
function generateExpectedTimes(startTime, interval) {
  let times = [];

  if (interval === "hour") {
    for (let i = 0; i < 24; i++) times.push(i);
  } else if (interval === "day") {
    let daysInMonth = new Date(startTime.getFullYear(), startTime.getMonth() + 1, 0).getDate();
    for (let i = 1; i <= daysInMonth; i++) times.push(i);
  } else if (interval === "month") {
    for (let i = 1; i <= 12; i++) times.push(i);
  }

  return times;
}

// üìå H√†m fetch d·ªØ li·ªáu t·ª´ Binance (ƒë√£ c·∫£i ti·∫øn v·ªõi gi·ªõi h·∫°n)
const fetchBinanceData = async (startTime, endTime, maxTrades = 10000) => {
  let allTrades = [];
  let lastTradeTime = startTime;
  let fetchCount = 0;
  const MAX_FETCH_COUNT = 10;

  while (lastTradeTime < endTime && allTrades.length < maxTrades) {
    try {
      // üî∏ ƒêi·ªÅu ch·ªânh limit ƒë·ªÉ tr√°nh l·∫•y qu√° nhi·ªÅu d·ªØ li·ªáu m·ªói l·∫ßn
      const limit = Math.min(1000, maxTrades - allTrades.length);
      const url = `https://api.binance.com/api/v3/aggTrades?symbol=BTCUSDT&startTime=${lastTradeTime}&endTime=${endTime}&limit=${limit}`;
      const response = await axios.get(url);
      const trades = response.data;

      if (!Array.isArray(trades) || trades.length === 0) {
        console.warn("üö® Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ Binance.");
        break;
      }

      // üî∏ Th√™m d·ªØ li·ªáu theo l√¥
      allTrades = allTrades.concat(trades);
      lastTradeTime = trades[trades.length - 1].T + 1;
      fetchCount++;

      if (fetchCount >= MAX_FETCH_COUNT) {
        console.warn(`‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n ${MAX_FETCH_COUNT} l·∫ßn g·ªçi API.`);
        break;
      }
      
      // üî∏ Th√™m ƒë·ªô tr·ªÖ gi·ªØa c√°c l·∫ßn g·ªçi API
      await new Promise(resolve => setTimeout(resolve, 100)); 
      
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu Binance:", err.message);
      break;
    }
  }

  return allTrades.length > 0 ? allTrades.map(trade => ({
    symbol: "BTCUSDT",
    price: parseFloat(trade.p),
    volume: parseFloat(trade.q),
    type: trade.m ? "sell" : "buy",
    timestamp: new Date(trade.T),
  })) : [];
};



module.exports = router;
